//UTILS AUTH
import bcrypt from 'bcrypt' //npm i bcrypt + npm i -D @types/bcrypt

/*
bcrypt
bcrypt es una librerÃ­a para hashear contraseÃ±as.
Hashear significa convertir una contraseÃ±a en un valor irreconocible 
e irreversible (una cadena de texto codificada).
Esto se hace para guardar contraseÃ±as de forma segura en una base de datos.

    -Usa un salt (una cadena aleatoria extra) para evitar ataques por tablas 
    precalculadas (rainbow tables).
    -Permite definir la complejidad del hasheo con un nÃºmero de rondas 
    (entre mÃ¡s rondas, mÃ¡s seguro, pero mÃ¡s tarda).

ðŸ‘‰ bcrypt.genSalt(10)
Genera un salt aleatorio.
El nÃºmero 10 indica cuÃ¡ntas rondas de procesamiento tendrÃ¡ el algoritmo.
A mÃ¡s rondas â†’ mÃ¡s seguro pero mÃ¡s lento.

ðŸ‘‰ bcrypt.hash(password, salt)
Combina el password recibido con ese salt.
Le aplica un algoritmo hash con varias rondas de procesamiento.
Devuelve una cadena irreconocible.

ðŸ‘‰ bcrypt.compare(password, hash)
Compara una contraseÃ±a en texto plano con una contraseÃ±a previamente hasheada
No desencripta el hash (porque bcrypt es un algoritmo de hashing, no de cifrado reversible)
Lo que hace es hashear el enteredPassword internamente con la misma configuraciÃ³n (salt rounds) 
y luego compara el resultado contra storedHash.
âœ… Si coinciden â†’ devuelve true
âœ… Si no â†’ devuelve false
*/
export const hashPassword = async (password : string) => {
    const salt = await bcrypt.genSalt(10);
    return await bcrypt.hash(password, salt);
}

export const checkPassword = async (enteredPassword : string, storedHash : string) => {
    return await bcrypt.compare(enteredPassword, storedHash);
} 